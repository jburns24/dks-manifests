---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dks-db-config
data:
  SPRING_PROFILES_ACTIVE: dev
  JAVA_ENABLE_DEBUG: "false"
  JAVA_DEBUG_PORT: "5005"
  DB_HOST: dks-db
  DB_NAME: dks_db
  PGPORT: "5432"
  DB_ROLE_NAME: "dks-user"
  DB_ROLE_PASSWORD: "dks-db-password"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "postgres-password"
---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: dks-secrets
# type: Opaque
# data:
#   DB_ROLE_NAME: ZGtzLXVzZXIK
#   DB_ROLE_PASSWORD: ZGtzLXBhc3N3b3JkCg==
#   POSTGRES_USER: cG9zdGdyZXMK
#   POSTGRES_PASSWORD: cG9zdGdyZXMtcGFzc3dvcmQK
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dks-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dks-db
  template:
    metadata:
      labels:
        app: dks-db
    spec:
      containers:
        - name: dks-db
          image: postgres:16.4-alpine@sha256:d898b0b78a2627cb4ee63464a14efc9d296884f1b28c841b0ab7d7c42f1fffdf

          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: dks-db-config
          # - secretRef:
          #     name: dks-secrets
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "$(POSTGRES_USER)"]
            initialDelaySeconds: 30
            periodSeconds: 20
            failureThreshold: 3
            timeoutSeconds: 10
          volumeMounts:
            - name: dks-db-datastore
              mountPath: /var/lib/postgresql/data
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: dks-db-datastore
          emptyDir: {}
        - name: init-script
          configMap:
            name: dks-db-init-config

---
apiVersion: v1
kind: Service
metadata:
  name: dks-db
spec:
  selector:
    app: dks-db
  ports:
    - port: 5432
      targetPort: 5432
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: db-init-script
# data:
#   0_0_db.sh: |
#     #!/bin/bash

#     # Check if the role exists
#     ROLE_COUNT=$(psql -U postgres -tAc "SELECT count(rolname) FROM pg_roles WHERE rolname='$DB_ROLE_NAME'")

#     if [ $ROLE_COUNT -eq 1 ]; then
#         # The role exists
#         echo "!!!!!!!!! User/role $DB_ROLE_NAME already exists. Skipping creation."

#     else
#         # The role does not exist
#         echo "--------  Creating user/role $DB_ROLE_NAME."
#         psql -c "CREATE ROLE \"$DB_ROLE_NAME\" WITH LOGIN NOSUPERUSER CREATEDB CREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD '$DB_ROLE_PASSWORD'"
#     fi

#     # Check if the database exists
#     if psql -lqt | cut -d \| -f 1 | grep -qw $DB_NAME; then
#         # The database exists
#         echo "!!!!!!!!  Database $DB_NAME already exists. Skipping creation."
#     else
#         # The database does not exist
#         echo "--------  Creating database $DB_NAME"
#         createdb -O $DB_ROLE_NAME -E UTF8 -T template0 --locale=en_US.utf8 $DB_NAME
#     fi
